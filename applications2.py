# Form implementation generated from reading ui file 'applications2.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

 
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QHeaderView, QLineEdit, QVBoxLayout, QTableWidgetItem, QAbstractItemView, QWidget, QHBoxLayout
import sys
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
import os








class Ui_Form(object):
        
        
    

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(739, 496)
        self.label = QtWidgets.QLabel(parent=Form)
        self.label.setGeometry(QtCore.QRect(-20, -10, 771, 621))
        self.label.setLineWidth(0)
        self.label.setMidLineWidth(0)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("background.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_app_header = QtWidgets.QLabel(parent=Form)
        self.label_app_header.setGeometry(QtCore.QRect(180, 30, 521, 51))
        font = QtGui.QFont()
        font.setFamily("Onyx")
        font.setPointSize(28)
        self.label_app_header.setFont(font)
        self.label_app_header.setStyleSheet("background-color: rgb(223, 194, 107);  /* Arka plan rengi */\n"
"color: rgb(2, 50, 90);  /* Yazı rengi */\n"
"border-radius: 10px;  /* Köşeleri yuvarlat */\n"
"padding: 5px;  /* Buton içindeki boşluk */")
        self.label_app_header.setObjectName("label_app_header")
        self.line_app_search = QtWidgets.QLineEdit(parent=Form)
        self.line_app_search.setGeometry(QtCore.QRect(20, 90, 151, 21))
        self.line_app_search.setStyleSheet("  border-radius: 10px; /* Yuvarlak köşeler */")
        self.line_app_search.setObjectName("line_app_search")
        self.push_app_search_2 = QtWidgets.QPushButton(parent=Form)
        self.push_app_search_2.setGeometry(QtCore.QRect(20, 120, 151, 21))
        self.push_app_search_2.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid rgb(223, 194, 107); /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}\n"
"")
        self.push_app_search_2.setObjectName("push_app_search_2")
        self.push_app_search_2.clicked.connect(self.search_user)
        self.push_app_search = QtWidgets.QPushButton(parent=Form)
        self.push_app_search.setGeometry(QtCore.QRect(200, 90, 151, 31))
        self.push_app_search.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.push_app_search.setObjectName("push_app_search")
        self.push_app_search.clicked.connect(self.load_all_applications)
        self.push_app_planned = QtWidgets.QPushButton(parent=Form)
        self.push_app_planned.setGeometry(QtCore.QRect(370, 130, 151, 31))
        self.push_app_planned.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.push_app_planned.setObjectName("push_app_planned")
        self.push_app_planned.clicked.connect(self.show_planned_meetings)
        self.push_app_unscheduled = QtWidgets.QPushButton(parent=Form)
        self.push_app_unscheduled.setGeometry(QtCore.QRect(370, 90, 151, 31))
        self.push_app_unscheduled.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.push_app_unscheduled.setObjectName("push_app_unscheduled")
        self.push_app_unscheduled.clicked.connect(self.show_unscheduled_meetings)
        self.pushButton_menu = QtWidgets.QPushButton(parent=Form)
        self.pushButton_menu.setGeometry(QtCore.QRect(200, 130, 151, 31))
        self.pushButton_menu.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.pushButton_menu.setObjectName("pushButton_menu")
        self.pushButton_menu.clicked.connect(self.show_main_menu)
        self.pushButton_exit = QtWidgets.QPushButton(parent=Form)
        self.pushButton_exit.setGeometry(QtCore.QRect(30, 460, 75, 24))
        self.pushButton_exit.setStyleSheet("QPushButton {\n"
"    background-color: rgb(209, 0, 0); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.pushButton_exit.setObjectName("pushButton_exit")
        self.pushButton_exit.clicked.connect(self.close)
        self.table_app_anatablo = QtWidgets.QTableWidget(parent=Form)
        self.table_app_anatablo.setGeometry(QtCore.QRect(30, 190, 691, 261))
        self.table_app_anatablo.setStyleSheet("QTableWidget {\n"
"    background-color: white;\n"
"    gridline-color: #D5D8DC; /* Grid çizgileri için açık gri */\n"
"    border: 1px solid #BDC3C7; /* Çerçeve rengi */\n"
"}\n"
"QHeaderView::section {\n"
"    background-color: rgb(2, 50, 90); /* Başlıkların arka planı */\n"
"    color: white; /* Beyaz yazı */\n"
"    font: bold 12px \"Tahoma\";\n"
"    border: 1px solid #2980B9;\n"
"}\n"
"")
        self.table_app_anatablo.setRowCount(1)
        self.table_app_anatablo.setColumnCount(8)
        self.table_app_anatablo.setObjectName("table_app_anatablo")
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_app_anatablo.setHorizontalHeaderItem(7, item)
        self.push_app_duplicate = QtWidgets.QPushButton(parent=Form)
        self.push_app_duplicate.setGeometry(QtCore.QRect(550, 90, 161, 31))
        self.push_app_duplicate.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.push_app_duplicate.setObjectName("push_app_duplicate")
        self.push_app_duplicate.clicked.connect(self.find_duplicate_records)
        self.push_app_filtering = QtWidgets.QPushButton(parent=Form)
        self.push_app_filtering.setGeometry(QtCore.QRect(550, 130, 161, 31))
        self.push_app_filtering.setStyleSheet("QPushButton {\n"
"    background-color: rgb(2, 50, 90); /* Yeşil arka plan */\n"
"    color: white; /* Beyaz yazı */\n"
"    border-radius: 10px; /* Yuvarlak köşeler */\n"
"    border: 2px solid #000000; /* Siyah kenarlık */\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(223, 194, 107); /* Üzerine gelince açık yeşil */\n"
"}")
        self.push_app_filtering.setObjectName("push_app_filtering")
        self.push_app_filtering.clicked.connect(self.filter_applications)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_app_header.setText(_translate("Form", "                         CRM- Project Applications"))
        self.line_app_search.setPlaceholderText(_translate("Form", "Enter text to search..."))
        self.push_app_search_2.setText(_translate("Form", "Search"))
        self.push_app_search.setText(_translate("Form", "All Applications"))
        self.push_app_planned.setText(_translate("Form", "Planned Mentor Meetings "))
        self.push_app_unscheduled.setText(_translate("Form", "Unscheduled M. Meetings"))
        self.pushButton_menu.setText(_translate("Form", "Main Menu"))
        self.pushButton_exit.setText(_translate("Form", "Exit"))
        item = self.table_app_anatablo.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Date"))
        item = self.table_app_anatablo.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Name Surname"))
        item = self.table_app_anatablo.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Mail"))
        item = self.table_app_anatablo.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Telephone"))
        item = self.table_app_anatablo.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Post Code"))
        item = self.table_app_anatablo.horizontalHeaderItem(5)
        item.setText(_translate("Form", "State"))
        item = self.table_app_anatablo.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Status"))
        item = self.table_app_anatablo.horizontalHeaderItem(7)
        item.setText(_translate("Form", "economic status"))
        self.push_app_duplicate.setText(_translate("Form", "Duplicate Records Button "))
        self.push_app_filtering.setText(_translate("Form", "Application Filtering Button"))

    def connect_to_drive(self):
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = Credentials.from_service_account_file("C:/Users/sueda/Desktop/design deneme/credentials.json", scopes=scope)#json dosyasi nerdeyse onun konumunu gir ki karisiklik olmasin
        self.client = gspread.authorize(creds)
        self.sheet = self.client.open("Basvurular").sheet1
    def search_user(self):
           # Google Sheets API kimlik bilgileri
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            credentials_path = os.path.join(os.getcwd(), "credentials.json")
            creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
            client = gspread.authorize(creds)
            print("Google Sheets'e bağlanıldı.")

            # Dosya ID'si (File ID)
            file_id = "1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ"  # Buraya kendi File ID'nizi yazın

            # Dosyayı aç
            sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # Dosyanın ilk sayfasını seç
            print("Dosya başarıyla açıldı.")
            records = sheet.get_all_records()
            print(f"Toplam kayıt sayısı: {len(records)}")
          
          
          
            
            df = pd.DataFrame(records)
            headers = list(records[0].keys()) if records else []
            self.table_app_anatablo.setColumnCount(len(headers))  # Sütun sayısını ayarla
            self.table_app_anatablo.setHorizontalHeaderLabels(headers)  # Başlıkları ayarla

            # LineEdit'ten alınan arama terimi
            search_text = self.line_app_search.text().strip()
    
            if search_text:
                 # Belirtilen sütunda arama yap (Örneğin "Ad" sütunu)
                 filtered_df = df[df['Adınız Soyadınız'].astype(str).str.contains(search_text, case=False, na=False)]
                 print(filtered_df)


                 
                 # Tabloyu güvenli şekilde temizle
                 while self.table_app_anatablo.rowCount() > 0:
                       self.table_app_anatablo.removeRow(0)

                 for row_idx, row in enumerate(filtered_df.itertuples(index=False)):
                     self.table_app_anatablo.insertRow(row_idx)
                     for col_idx, value in enumerate(row):  # İlk elemanı atlamak için [1:]
                        self.table_app_anatablo.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

    
                 
    def show_unscheduled_meetings(self):
        
          try:
                scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
                credentials_path = os.path.join(os.getcwd(), "credentials.json")
                creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
                client = gspread.authorize(creds)
                print("Google Sheets'e bağlanıldı.")

                # Dosya ID'si (File ID)
                file_id = "1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ"  # Buraya kendi File ID'nizi yazın

                # Dosyayı aç
                sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # Dosyanın ilk sayfasını seç
                print("Dosya başarıyla açıldı.")
                records = sheet.get_all_records()
                print(f"Toplam kayıt sayısı: {len(records)}")
                # Google Drive API Kimlik Doğrulama
                
                df = pd.DataFrame(records)
        
                # 'Mentor görüşmesi' sütunu içinde 'ATANMADI' yazanları filtrele
                filtered_df = df[df['Mentor gorusmesi'].str.upper().str.strip() == 'ATANMADI']

        
                # Tablonun sütunlarını dinamik olarak ayarla
                self.table_app_anatablo.setRowCount(len(filtered_df))
                self.table_app_anatablo.setColumnCount(len(df.columns))
                
                self.table_app_anatablo.setHorizontalHeaderLabels(df.columns)

                while self.table_app_anatablo.rowCount() > 0:
                       self.table_app_anatablo.removeRow(0)

                for row_idx, row in enumerate(filtered_df.itertuples(index=False)):
                     self.table_app_anatablo.insertRow(row_idx)
                     for col_idx, value in enumerate(row):  
                        self.table_app_anatablo.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))
          except Exception as e:
               print(f"Error loading data: {e}")
        
                




           



    def find_duplicate_records(self):
        
        # Google Sheets API kimlik bilgileri
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        credentials_path = os.path.join(os.getcwd(), "credentials.json")
        creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
        client = gspread.authorize(creds)
        print("Google Sheets'e bağlanıldı.")

        # Dosyayı aç
        sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # İlk sayfa
        print("Dosya başarıyla açıldı.")
        records = sheet.get_all_records()
        print(f"Toplam kayıt sayısı: {len(records)}")

        # Veriyi DataFrame'e dönüştür
        df = pd.DataFrame(records)
        if df.empty:
            print("Veri bulunamadı!")
            return

        # Mükerrer kayıtları bul (aynı isim ve e-posta tekrar edenler)
        duplicate_df = df[df.duplicated(subset=['Adınız Soyadınız', 'Mail adresiniz'], keep=False)]
        print(f"Mükerrer kayıt sayısı: {len(duplicate_df)}")

        # Tabloyu temizle
        self.table_app_anatablo.setRowCount(0)
        self.table_app_anatablo.setColumnCount(len(df.columns))
        self.table_app_anatablo.setHorizontalHeaderLabels(df.columns.tolist())

        # Sonuçları tabloya ekle
        for row_idx, row in enumerate(duplicate_df.itertuples(index=False)):
            self.table_app_anatablo.insertRow(row_idx)
            for col_idx, value in enumerate(row):
                self.table_app_anatablo.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

        print("Mükerrer kayıtlar tabloya eklendi.")

    def show_main_menu(self):
        # Main Menu butonu işlevi
         if self.previous_window:
            self.previous_window.show()
        else:
            from user_menu import UserMenuWindow
            user_menu= UserMenuWindow()
            user_menu.show()
        self.close()

    def show_planned_meetings(self):
        # Planned Mentor Meetings butonu işlevi
         try:
                scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
                credentials_path = os.path.join(os.getcwd(), "credentials.json")
                creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
                client = gspread.authorize(creds)
                print("Google Sheets'e bağlanıldı.")

                # Dosya ID'si (File ID)
                file_id = "1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ"  # Buraya kendi File ID'nizi yazın

                # Dosyayı aç
                sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # Dosyanın ilk sayfasını seç
                print("Dosya başarıyla açıldı.")
                records = sheet.get_all_records()
                print(f"Toplam kayıt sayısı: {len(records)}")
                # Google Drive API Kimlik Doğrulama
                
                df = pd.DataFrame(records)
        
                # 'Mentor görüşmesi' sütunu içinde 'ATANMADI' yazanları filtrele
                filtered_df = df[df['Mentor gorusmesi'].str.upper().str.strip() == 'OK']

        
                # Tablonun sütunlarını dinamik olarak ayarla
                self.table_app_anatablo.setRowCount(len(filtered_df))
                self.table_app_anatablo.setColumnCount(len(df.columns))
                
                self.table_app_anatablo.setHorizontalHeaderLabels(df.columns)

                while self.table_app_anatablo.rowCount() > 0:
                       self.table_app_anatablo.removeRow(0)

                for row_idx, row in enumerate(filtered_df.itertuples(index=False)):
                     self.table_app_anatablo.insertRow(row_idx)
                     for col_idx, value in enumerate(row):  
                        self.table_app_anatablo.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))
         except Exception as e: 
               print(f"Error loading data: {e}")
        

    def filter_applications(self):
        # Application Filtering butonu işlevi
          
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        credentials_path = os.path.join(os.getcwd(), "credentials.json")
        creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
        client = gspread.authorize(creds)
        print("Google Sheets'e bağlanıldı.")

        # Dosyayı aç
        sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # İlk sayfa
        print("Dosya başarıyla açıldı.")
        records = sheet.get_all_records()
        print(f"Toplam kayıt sayısı: {len(records)}")

        # Veriyi DataFrame'e dönüştür
        df = pd.DataFrame(records)
        if df.empty:
            print("Veri bulunamadı!")
            return

        # Mükerrer olmayan kayıtları filtrele (her isim ve e-posta yalnızca 1 kere görünecek)
        unique_df = df.drop_duplicates(subset=['Adınız Soyadınız', 'Mail adresiniz'], keep='first')
        print(f"Tekil kayıt sayısı: {len(unique_df)}")

        # Tabloyu temizle
        self.table_app_anatablo.setRowCount(0)
        self.table_app_anatablo.setColumnCount(len(df.columns))
        self.table_app_anatablo.setHorizontalHeaderLabels(df.columns.tolist())

        # Sonuçları tabloya ekle
        for row_idx, row in enumerate(unique_df.itertuples(index=False)):
            self.table_app_anatablo.insertRow(row_idx)
            for col_idx, value in enumerate(row):
                self.table_app_anatablo.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

        print("Tekil kayıtlar tabloya eklendi.")
    
    def load_all_applications(self):
         try:
            # Google Sheets API kimlik bilgileri
            scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
            credentials_path = os.path.join(os.getcwd(), "credentials.json")
            creds = Credentials.from_service_account_file(credentials_path, scopes=scope)
            client = gspread.authorize(creds)
            print("Google Sheets'e bağlanıldı.")

            # Dosya ID'si (File ID)
            file_id = "1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ"  # Buraya kendi File ID'nizi yazın

            # Dosyayı aç
            sheet = client.open_by_key("1DGuu0P_jbTadFnnOwX2G7Pf0lpikI8l9ekTfXOJeTMQ").sheet1  # Dosyanın ilk sayfasını seç
            print("Dosya başarıyla açıldı.")
            records = sheet.get_all_records()
            print(f"Toplam kayıt sayısı: {len(records)}")

            # Sütun başlıklarını al
            headers = list(records[0].keys()) if records else []
            self.table_app_anatablo.setColumnCount(len(headers))  # Sütun sayısını ayarla
            self.table_app_anatablo.setHorizontalHeaderLabels(headers)  # Başlıkları ayarla

            # Tabloyu temizle
            self.table_app_anatablo.setRowCount(0)

            # Verileri tabloya yükle
            self.table_app_anatablo.setRowCount(len(records))
            for row_number, record in enumerate(records):
                for column_number, header in enumerate(headers):
                    item = QtWidgets.QTableWidgetItem(str(record.get(header, "")))
                    self.table_app_anatablo.setItem(row_number, column_number, item)
         except Exception as e:
            print(f"Hata: {e}")  # Hata mesajını yazdır
       



        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
